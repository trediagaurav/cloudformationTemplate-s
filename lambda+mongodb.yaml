Description:
  This template deploys a lambda function in a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. API gateway is place between cloudfront and lambda function which
  establish a connection between them. CloudFront is configure with two
  path behavoir one which leads to same lambda function and default leads to S3 bucket allocated to each one of them.
  Cambium standard WAF is establish on cloudfront which is very important for protecting the excess point.
  Template consists of the following resources:-
  . Domain name
  . One cloudfront to each domain name
  . One WAF to cloudfront
  . One Api-Gateway.
  . One lambda function.
  . one S3 bucket.
  . Atlas 3rd party database (Needs to connect to lambda)

Parameters:
  EnvironmentName:
    Description: Environment purpose
    Type: String
    AllowedValues: [dev, qa, perf, preprod, prod]

  Identifier:
    Description: This will be the main identifier that will perform the prefix for all resources. For example, 'my-project' will create 'my-project-dev-ec2', 'my-project-dev-db', etc. 
    Type: String

  apiGatewayHTTPMethod:
    Type: String
    AllowedValues: [GET, POST, PUT, DELETE, ANY]
    Default: ANY

  lambdaFunctionName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: lambda-function

  InboundPortHTTPS:
    Description: Allowed IP address for direct HTTPS access. The default is the Cambium office. 
    Type: String
    Default: 217.175.92.222/32

  VpcCIDR:
    Description: Please enter the IP range (CIDR notation) for this VPC
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
    Type: String
    Default: 10.0.0.20/20

  PublicSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
    Type: String
    Default: 10.0.16.33/20

  PrivateSubnet1CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone
    Type: String
    Default: 10.0.128.44/24

  PrivateSubnet2CIDR:
    Description: Please enter the IP range (CIDR notation) for the private subnet in the second Availability Zone
    Type: String
    Default: 10.0.144.0/20


  #TODO see if this parameter is needed

  TagClient:
    Description: The cost-tracking tag 'Client' which is used for billing purposes.
    Type: String   

  TagProject:
    Description: The cost-tracking tag 'Project' which is used for billing purposes.
    Type: String

  TagChargeable:
    Description: The cost-tracking tag 'Chargeable' which is used for billing purposes. 
    AllowedValues: [TBD, 'Yes', 'No' ]
    Type: String
    Default: TBD 

Resources:
  ApplicationVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'vpc']]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'Internet-gateway']]

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref ApplicationVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApplicationVPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'subnet-public-az1']]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApplicationVPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'subnet-public-az2']]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApplicationVPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'subnet-private-az1']]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApplicationVPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'subnet-private-az2']]


  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ApplicationVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'routing-public']]
      
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ApplicationVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'routing-private-az1']]

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ApplicationVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'routing-private-az2']]

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  RestrictedAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['-', [!Ref Identifier, !Ref EnvironmentName,'lambda-sg']]
      GroupDescription: "Accessible only to the load balancer and the Cambium office"
      VpcId: !Ref ApplicationVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName,'lambda-sg']]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref InboundPortHTTPS

##################### API-GATEWAY / LAMBDA ################################

  apiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: Example API Gateway
      FailOnWarnings: true
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'api'] ]

  apiGatewayRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      HttpMethod: !Ref apiGatewayHTTPMethod
      Integration:
        IntegrationHttpMethod: POST
        Type: AWS_PROXY
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt lambdaFunction.Arn
        IntegrationResponses:
        - StatusCode: 200
        RequestTemplates:
          application/json:
            Fn::Join:
            - ''
            - - "{"
              - '  "name": "$input.params(''name'')"'
              - "}"
      RequestParameters:
        method.request.querystring.name: false  
      ResourceId: !GetAtt apiGateway.RootResourceId
      RestApiId: !Ref apiGateway

  apiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - apiGatewayRootMethod
    Properties:
      RestApiId: !Ref apiGateway
      StageName: !Ref EnvironmentName

  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              const response = {
                  statusCode: 200,
                  body: JSON.stringify('Hello from Lambda!'),
              };
              return response;
          };
      Description: Example Lambda function
      FunctionName: !Ref lambdaFunctionName
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: nodejs16.x
      Timeout: 15
      TracingConfig:
        Mode: Active
      VpcConfig:
        SecurityGroupIds:
          - !Ref RestrictedAccessSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'lambda'] ]
        - Key: Client
          Value: !Ref TagClient
        - Key: Project
          Value: !Ref TagProject
        - Key: Chargeable
          Value: !Ref TagChargeable    

  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt lambdaFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${apiGateway}/${EnvironmentName}/${apiGatewayHTTPMethod}/

  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole          
      Policies:
        - PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:DescribeLogGroups
                  - logs:DescribeLogStreams
                  - logs:PutLogEvents
                  - logs:GetLogEvents
                  - logs:FilterLogEvents
                Effect: Allow
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${lambdaFunctionName}:*
          PolicyName: lambda

  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${lambdaFunctionName}
      RetentionInDays: 90

##################### s3 Bucket ################################  

  Bucket:
        Type: AWS::S3::Bucket
        Properties:
            AccessControl: Private
            BucketName: !Join [ ".", [ !Ref EnvironmentName, !Ref Identifier] ]
            PublicAccessBlockConfiguration:
              BlockPublicAcls: true
              BlockPublicPolicy: true
              IgnorePublicAcls: true
              RestrictPublicBuckets: true
            Tags:
                - Key: description
                  Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'S3']]
                - Key: Name
                  Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 's3']]
                - Key: Client
                  Value: !Ref TagClient
                - Key: Project
                  Value: !Ref TagProject
                - Key: Chargeable
                  Value: !Ref TagChargeable

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Join [ ".", [ !Ref EnvironmentName, !Ref Identifier] ]
      PolicyDocument:
        Version: '2012-10-17'
        Id: PolicyForCloudFrontPrivateContent
        Statement:
          - Sid: '1'
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginIdentity}'
            Action: 's3:*'
            Resource: !Join 
              - ''
              - - 'arn:aws:s3:::'
                - !Ref EnvironmentName
                - '.'
                - !Ref Identifier
                - /*    

  CloudFrontOriginIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'origin identity'

  publicDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'CloudFront']]
        - Key: Client
          Value: !Ref TagClient
        - Key: Project
          Value: !Ref TagProject
        - Key: Chargeable
          Value: !Ref TagChargeable  
      DistributionConfig:
        WebACLId: arn:aws:wafv2:us-east-1:240609415165:global/webacl/StandardCambiumWaf/3ae097a9-ac55-415a-a451-c47a81fa2b9a
        Aliases:  
          - !Join [ "", [ !Ref EnvironmentName, '-', !Ref Identifier, '.development.cambium.co.il' ] ]
        Origins:
          - DomainName: !Sub ${Bucket}.s3.${AWS::Region}.amazonaws.com
            Id: !Join [ ".", [ 'S3', !Ref EnvironmentName, !Ref Identifier] ]
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudFrontOriginIdentity}'
          - DomainName: !Sub ${apiGateway}.execute-api.${AWS::Region}.amazonaws.com
            Id: !Join [ ".", [ 'api-gateway', !Ref EnvironmentName, !Ref Identifier] ]
            CustomOriginConfig:
              OriginProtocolPolicy: match-viewer    
        Enabled: 'true'
        Comment: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'CloudFront']]
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          TargetOriginId: !Join [ ".", [ 'S3', !Ref EnvironmentName, !Ref Identifier] ]
          ForwardedValues:
            QueryString: 'false'
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
        CacheBehaviors:
          - AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            TargetOriginId: !Join [ ".", [ 'api-gateway', !Ref EnvironmentName, !Ref Identifier] ]
            ForwardedValues:
              QueryString: 'false'
            ViewerProtocolPolicy: redirect-to-https
            MinTTL: '50'
            PathPattern: !Join [ "", [ '/', !Ref EnvironmentName, '/*'] ]
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
        ViewerCertificate:
          SslSupportMethod: sni-only
          AcmCertificateArn: arn:aws:acm:us-east-1:240609415165:certificate/0e3d40f5-3d5c-454e-97c8-7abf5bbf3e56
          MinimumProtocolVersion: TLSv1.2_2021

  
# Route53
  CambiumDNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId : Z0921147290Y06IF1KOKD
      Comment: DNS name for my cloudfront.
      RecordSets:
      - Name: !Join [ "", [ !Ref EnvironmentName, '-', !Ref Identifier, '.development.cambium.co.il' ] ]
        Type: A
        AliasTarget: 
          HostedZoneId: Z2FDTNDATAQYW2
          DNSName: !GetAtt 
            - publicDistribution
            - DomainName      
  
Outputs:
  apiGatewayInvokeURL:
    Value: !Sub https://${apiGateway}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}

  siteName:
    Value: !Join [ "", [ 'https://',!Ref EnvironmentName, '-', !Ref Identifier, '.development.cambium.co.il' ] ]

  adminsite:
    Value:  !Join [ "", ['https://', !Ref EnvironmentName, '-', !Ref Identifier,'-', 'admin', '.development.cambium.co.il' ] ] 

