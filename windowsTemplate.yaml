Description:
  This template deploys a new VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets. It consists of EC2 instance
  with LoadBalancer and MsSQL Database. And DNS name of the LoadBalancer is been allocated
  to cambium.co.il in Route53. Cognito is been placed for the authentification and authorization
  of a website if required.

Parameters:
  EnvironmentName:
    Description: Environment purpose
    Type: String
    AllowedValues: [dev, qa, perf, preprod, prod]

  Identifier:
    Description: This will be the main identifier that will perform the prefix for all resources. For example, 'my-project' will create 'my-project-dev-ec2', 'my-project-dev-db', etc. 
    Type: String

  KeyName:
    Description: Key Pair for EC2
    Type: 'AWS::EC2::KeyPair::KeyName'

  MasterUsername:
    Default: sa
    Description: The username for the database system administrator
    Type: String

  MasterPassword:
    Description: Master password for the database (minimum 8 characters)
    Type: String
    NoEcho: true


  #TODO see if this parameter is needed

  TagClient:
    Description: The cost-tracking tag 'Client' which is used for billing purposes.
    Type: String   

  TagProject:
    Description: The cost-tracking tag 'Project' which is used for billing purposes.
    Type: String

  TagChargeable:
    Description: The cost-tracking tag 'Chargeable' which is used for billing purposes. 
    AllowedValues: [TBD, 'Yes', 'No' ]
    Type: String
    Default: TBD 

  VpcCIDR:
    Description: The CIDR range for the VPC (recommended to use the default)
    Type: String
    Default: 172.32.0.0/16
    
  RDSEngine:
    Description: The SQL Server edition for this deployment - Express, Standard, Web, or Enterprise
    Type: String
    AllowedValues: [sqlserver-ee, sqlserver-se, sqlserver-ex, sqlserver-web]
    Default: sqlserver-web
    ConstraintDescription: "Please specify either a sqlserver-ee, sqlserver-se, sqlserver-ex, or sqlserver-web engine for the RDS instance."

  InstanceImageId:
    Description: The Amazon Machine Instance ID (AMI) for the EC2. The default option is for Windows.
    Type: String
    Default: ami-05c7cea0ca2434ebc  

  DiskVolumeSize:
    Default: 80
    Description: EC2 disk volume size in GB. Must be at least 32.
    ConstraintDescription: Must be a number greater or equal to 32
    MinValue: 32
    Type: Number
    
  InstanceType:
    Description: EC2 instance type. Please refer to AWS instance type documentation for sizing.
    Type: String
    Default: r5b.large
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - r5b.large
      - r5b.xlarge
      - r5b.2xlarge
      - r5b.4xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
    ConstraintDescription: Please choose a valid instance type.

  RDSClass:
    Description: The name of the compute and memory capacity classes for the RDS database instance.
    Type: String
    Default: db.t3.small
    AllowedValues:
      - db.t3.small
      - db.t3.medium
      - db.t3.large
      - db.t3.xlarge
      - db.t3.2xlarge
      - db.r4.large
      - db.r4.xlarge
      - db.r4.2xlarge
      - db.r4.4xlarge
      - db.r4.8xlarge
      - db.r4.16xlarge*
      - db.r5.large
      - db.r5.xlarge
      - db.r5.2xlarge
      - db.r5.4xlarge
      - db.r5.8xlarge
      - db.m4.large
      - db.m4.xlarge
      - db.m4.2xlarge
      - db.m4.4xlarge
      - db.m4.10xlarge
      - db.m5.large
      - db.m5.xlarge
      - db.m5.2xlarge
      - db.m5.4xlarge
      - db.m5.8xlarge
      - db.m5.12xlarge
    ConstraintDescription: Please choose a valid instance type.
     
  RDSstorage:
    Description: The allocated storage size, specified in gigabytes (GB).
    Type: String
    AllowedPattern: "^([2-9]?[0-9]{1}|[0-9]{3,4}|1[0-5]?[0-9]{3}|16[0-2]?[0-9]{2}|163[0-7]?[0-9]{1}|1638[0-4]?)$"
    ConstraintDescription: "Value must be a valid number between 20-16384."
    Default: 20

  InboundPortRDP:
    Description: Allowed IP address for RDP access. The default is the Cambium office.
    Type: String
    Default: 217.175.92.222/32

  InboundPortHTTP:
    Description: Allowed IP address for HTTP access. The default is the Cambium office.
    Type: String
    Default: 217.175.92.222/32

  InboundPortHTTPS:
    Description: Allowed IP address for direct HTTPS access. The default is the Cambium office. 
    Type: String
    Default: 217.175.92.222/32

  PublicSubnet1CIDR:
    Description: CIDR range for the public subnet in the first availability zone. (Recommended to use the default.)
    Type: String
    Default: 172.32.10.0/24

  PublicSubnet2CIDR:
    Description: CIDR range for the public subnet in the second availability zone. (Recommended to use the default.)
    Type: String
    Default: 172.32.20.0/24

  PrivateSubnet1CIDR:
    Description: CIDR range for the private subnet in the first availability zone. (Recommended to use the default.)
    Type: String
    Default: 172.32.30.0/24

  PrivateSubnet2CIDR:
    Description: CIDR range for the private subnet in the second availability zone. (Recommended to use the default.)
    Type: String
    Default: 172.32.40.0/24

Resources:
  ApplicationVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'vpc']]

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'Internet-gateway']]

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref ApplicationVPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApplicationVPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'subnet-public-az1']]

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApplicationVPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value:  !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'subnet-public-az2']]

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApplicationVPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:  !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'subnet-private-az1']]

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ApplicationVPC
      AvailabilityZone: !Select [1, !GetAZs ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value:  !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'subnet-private-az2']]

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ApplicationVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'routing-public']]

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ApplicationVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'routing-private-az1']]

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ApplicationVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'routing-private-az2']]
  
  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  # EC2 and ALB Security Groups
  RestrictedAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['-', [!Ref Identifier, !Ref EnvironmentName,'ec2-sg']]
      GroupDescription: "Accessible only to the load balancer and the Cambium office"
      VpcId: !Ref ApplicationVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName,'ec2-sg']]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: !Ref InboundPortRDP
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref InboundPortHTTP
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId:
            Fn::GetAtt:
            - LoadBalancerSecurityGroup
            - GroupId    

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'lb-sg']]
      VpcId: !Ref ApplicationVPC
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName,'lb-sg']]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref InboundPortHTTPS

  # Target Group, Listener and Application  Load Balancer
  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 15
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: '200'
      Name: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'lb-target']]
      Port: 443
      Protocol: HTTPS
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: '20'
      Targets:
      - Id: !Ref ApplicationEC2
        Port: 443
      UnhealthyThresholdCount: 3
      VpcId: !Ref ApplicationVPC

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS
      SslPolicy: "ELBSecurityPolicy-2016-08"
      Certificates:
        - CertificateArn: arn:aws:acm:eu-west-1:240609415165:certificate/13dc1fe2-5879-4518-955d-1ea930f9b408

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Name: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'lb']]
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !GetAtt LoadBalancerSecurityGroup.GroupId

  ApplicationEC2:        
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref InstanceImageId
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref DiskVolumeSize
            VolumeType: gp2
      SecurityGroupIds:
        - !Ref RestrictedAccessSecurityGroup
      SubnetId: !Ref PublicSubnet1
      KeyName: !Ref KeyName
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'ec2'] ]
        - Key: Client
          Value: !Ref TagClient
        - Key: Project
          Value: !Ref TagProject
        - Key: Chargeable
          Value: !Ref TagChargeable

  # RDS with Security Group
  ApplicationDB:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'db']]
      Engine: !Ref RDSEngine
      MasterUsername: !Ref MasterUsername
      MasterUserPassword: !Ref MasterPassword
      DBInstanceClass: !Ref RDSClass
      DBSubnetGroupName: !Ref DBSubnetGroup
      LicenseModel: license-included
      MonitoringInterval: 0 
      PubliclyAccessible: true 
      MultiAZ: false
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'db']]
        - Key: Client
          Value: !Ref TagClient
        - Key: Project
          Value: !Ref TagProject
        - Key: Chargeable
          Value: !Ref TagChargeable   
      DBSecurityGroups:
      - Ref: DBSecurityGroup
      AllocatedStorage: !Ref RDSstorage

  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      DBSecurityGroupIngress:
        EC2SecurityGroupId:
          Ref: RestrictedAccessSecurityGroup
      GroupDescription: Connection Access to RDS
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'RDS','sg']]
      EC2VpcId: !Ref ApplicationVPC

  DBSubnetGroup: 
   Type: "AWS::RDS::DBSubnetGroup"
   Properties:
    DBSubnetGroupDescription: Subnets for the database
    SubnetIds:
      - Ref : PrivateSubnet1
      - Ref : PrivateSubnet2

  # Route53
  CambiumDNSRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId : Z0921147290Y06IF1KOKD
      Comment: DNS name for my LoadBalancer.
      RecordSets:
      - Name: !Join ['', [!Ref Identifier, '-', !Ref EnvironmentName, '.development.cambium.co.il']]
        Type: A
        AliasTarget: 
          HostedZoneId: !GetAtt 'ApplicationLoadBalancer.CanonicalHostedZoneID'
          DNSName: !GetAtt 'ApplicationLoadBalancer.DNSName'


  # Cognito Setup

  # Creates a role that allows Cognito to send SNS messages
  SNSRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "cognito-idp.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "CognitoSNSPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: "sns:publish"
                Resource: "*"

  # Creates a user pool in cognito for your app to auth against
  # This example requires MFA and validates the phone number to use as MFA
  # Other fields can be added to the schema

  UserPool:
    Type: "AWS::Cognito::UserPool"
    Properties:
      UserPoolName: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'user-pool']]
      AutoVerifiedAttributes:
        - phone_number
      MfaConfiguration: "ON"
      SmsConfiguration:
        ExternalId: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, '-external']]
        SnsCallerArn: !GetAtt SNSRole.Arn
      Schema:
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: phone_number
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: slackId
          AttributeDataType: String
          Mutable: true
  
  # Creates a User Pool Client to be used by the identity pool
  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, '-client']]
      GenerateSecret: false
      UserPoolId: !Ref UserPool
  
  # Creates a federeated Identity pool
  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Join ['-', [!Ref Identifier, !Ref EnvironmentName, 'Identify']]
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders: 
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # Create a role for unauthorized access to AWS resources. Very limited access. Only allows users in the previously created Identity Pool
  CognitoUnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"

  # Create a role for authorized access to AWS resources. Control what your user can access. This example only allows Lambda invocations
  # Only allows users in the previously created Identity Pool

  CognitoAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
  
  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedRole.Arn

Outputs:
  UserPoolId:
    Value: !Ref UserPool
    Export:
      Name: "UserPool::Id"
  UserPoolClientId:
    Value: !Ref UserPoolClient
    Export:
      Name: "UserPoolClient::Id"
  IdentityPoolId:
    Value: !Ref IdentityPool
    Export:
      Name: "IdentityPool::Id"
